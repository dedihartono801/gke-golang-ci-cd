# Define a Kubernetes namespace named "production" for organizing resources.
apiVersion: v1
kind: Namespace
metadata:
  name: production

# Define a Deployment named "myapp" within the "production" namespace.
# This Deployment manages a single replica of the containerized application.
# The Deployment utilizes rolling updates for deployment strategy.
# The pod template specifies resource requests and limits for CPU and memory.
# It also specifies the nodeSelector to deploy to nodes with the label "cloud.google.com/gke-nodepool: default-pool".
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: production
spec:
  selector:
    matchLabels:
      app: myapp
  strategy:
    type: RollingUpdate
  replicas: 1
  template: #Template for container
    metadata:
      labels:
        app: myapp
    spec:
      nodeSelector: # deploy to nodes with these labels
        cloud.google.com/gke-nodepool: default-pool
      containers:
      - name: myapp
        image:  gcr.io/PROJECT_ID/myapp:GITHUB_SHA
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: myapp
        volumeMounts:
        - name: log-volume
          mountPath: /var/log/pods
        volumes:
        - name: log-volume
          emptyDir: {}
        resources:
          requests:
            cpu: "50m" # 50 milli-CPU
            memory: "64Mi"  # Set your memory request here
          limits:
            cpu: "100m"      # Set your CPU limit here
            memory: "128Mi"  # Set your memory limit here

# Define a Kubernetes Service named "service-myapp" within the "production" namespace.
# This Service exposes the "myapp" Deployment internally within the cluster on port 8080.
---
apiVersion: v1
kind: Service
metadata:
  name: service-myapp
  namespace: production
spec:
  type: ClusterIP
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 80

# Define an Ingress resource named "ingress-myapp" within the "production" namespace.
# This Ingress resource, using the NGINX Ingress controller, routes traffic from the host "api.cobasaja.biz.id" to the "service-myapp" Service.
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-myapp
  namespace: production
  annotations:
    kubernetes.io/ingress.class: nginx  # Specify the NGINX Ingress class
spec:
  rules:
  - host: api.cobasaja.biz.id
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service-myapp
            port: 
              number: 8080

# Define another Ingress resource named "ingress-myapp-v2" within the "production" namespace.
# This Ingress resource is configured for HTTPS and doesn't use an Ingress controller.
# It routes traffic from the host "api-v2.cobasaja.biz.id" to the "service-myapp" Service.
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-myapp-v2
  namespace: production
  annotations:
    kubernetes.io/ingress.class: gce
    kubernetes.io/ingress.allow-http: "false"
spec:
  tls: # Configuration for HTTPS
    - hosts:
      - api-v2.cobasaja.biz.id
      secretName: tls-cobasaja # Name of the TLS secret object
  rules:
  - host: api-v2.cobasaja.biz.id
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service-myapp
            port: 
              number: 8080

# Define a HorizontalPodAutoscaler named "hpa-myapp" within the "production" namespace.
# This HPA scales the "myapp" Deployment based on CPU and memory utilization, aiming for a utilization of 90%.
# It sets minimum and maximum replicas to 1 and 5 respectively.
# Scaling policies are defined for both scaling up and scaling down.
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-myapp
  namespace: production
spec:
  behavior:
    scaleUp:
      policies:
      - type: Percent
        value: 90
        periodSeconds: 15 # Up to nine times the current number of replicas can be added every 15 seconds.
    scaleDown:
      policies:
      - type: Pods
        value: 1
        periodSeconds: 10 # Only one Pod can be released every ten minutes.
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: myapp
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 90
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 90

# Define a PodDisruptionBudget named "pdb-for-myapp" within the "production" namespace.
# This PDB ensures that at least 2 pods of the "myapp" Deployment are available during disruptions.
# The usage of minAvailable is specified, while maxUnavailable is commented out.
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pdb-for-myapp
  namespace: production
spec:
  minAvailable: 2 # Minimum number of pods that must be available
  #maxUnavailable: 1 # Maximum number of pods that can be unavailable
  selector:
    matchLabels:
      app: myapp
