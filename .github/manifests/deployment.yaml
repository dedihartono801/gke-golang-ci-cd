apiVersion: v1
kind: Namespace
metadata:
  name: production

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: production
spec:
  selector:
    matchLabels:
      app: myapp
  strategy:
    type: RollingUpdate
  replicas: 1
  template: #Template for container
    metadata:
      labels:
        app: myapp
    spec:
      nodeSelector: # deploy to nodes with these labels
        cloud.google.com/gke-nodepool: default-pool
      containers:
      - name: myapp
        image:  gcr.io/PROJECT_ID/myapp:GITHUB_SHA
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: myapp
        resources:
          requests:
            cpu: "50m" # 50 milli-CPU
            memory: "64Mi"  # Set your memory request here
          limits:
            cpu: "100m"      # Set your CPU limit here
            memory: "128Mi"  # Set your memory limit here

---
apiVersion: v1
kind: Service
metadata:
  name: service-myapp
  namespace: production
spec:
  type: ClusterIP
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 80

#example ingress resource using nginx ingress controller
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-myapp
  namespace: production
  annotations:
    kubernetes.io/ingress.class: nginx  # Specify the NGINX Ingress class
spec:
  rules:
  - host: api.cobasaja.biz.id
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service-myapp
            port: 
              number: 8080

#example ingress resource without ingress controller in gce
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-myapp-v2
  namespace: production
  annotations:
    kubernetes.io/ingress.class: gce
    kubernetes.io/ingress.allow-http: "false"
spec:
  tls: # konfigurasi HTTPS
    - hosts:
      - api-v2.cobasaja.biz.id
      secretName: tls-cobasaja # nama object secret TLS yang dibuat
  rules:
  - host: api-v2.cobasaja.biz.id
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: service-myapp
            port: 
              number: 8080

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-myapp
  namespace: production
spec:
  behavior:
    scaleUp:
      policies:
      - type: Percent
        value: 90
        periodSeconds: 15 # Up to nine times the current number of replicas can be added every 15 seconds.
    scaleDown:
      policies:
      - type: Pods
        value: 1
        periodSeconds: 10 # Only one Pod can be released every ten minutes.
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: myapp
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 90
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 90

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pdb-for-myapp
  namespace: production
spec:

  # tidak dapat menggunakan minAvailable & maxUnavailable bersamaan

  minAvailable: 2 # jumlah minimal pod yang harus ada, bisa integer atau persentase

  #maxUnavailable: 1 # jumlah maxsimal pod yang boleh dihapus/ tidak ada, bisa integer atau persentase
  selector:
    matchLabels:
      app: myapp
